{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Portafolio","text":""},{"location":"#sobre-mi","title":"Sobre m\u00ed","text":""},{"location":"#hola-soy-salamanca-esquivel-eduardo","title":"Hola, soy Salamanca Esquivel Eduardo","text":"<p>Soy Estudiante de Ingenier\u00eda Mecatr\u00f3nica en IBERO Puebla. Me interesan el deporte, la mec\u00e1nica y la tecnolog\u00eda.  </p>"},{"location":"#contacto","title":"Contacto","text":"<ul> <li>\ud83d\udce7 Correo institucional: 203279@iberopuebla.mx </li> </ul>"},{"location":"#de-lo-que-me-siento-orgulloso","title":"De lo que me siento orgulloso","text":""},{"location":"#proyecto-o-logro","title":"[proyecto o logro]","text":"<p>Calculadora binaria con arduino UNO.  </p>"},{"location":"comandos/","title":"Encabezados","text":"<pre><code># T\u00edtulo H1\n## T\u00edtulo H2\n### T\u00edtulo H3\n</code></pre>"},{"location":"comandos/#titulo-h1","title":"T\u00edtulo H1","text":""},{"location":"comandos/#titulo-h2","title":"T\u00edtulo H2","text":""},{"location":"comandos/#titulo-h3","title":"T\u00edtulo H3","text":""},{"location":"comandos/#enfasis-y-codigo-en-linea","title":"\u00c9nfasis y c\u00f3digo en l\u00ednea","text":"<pre><code>**negritas**, *cursivas*, ~~tachado~~, `c\u00f3digo en l\u00ednea`\n</code></pre> <p>negritas, cursivas, ~~tachado~~, <code>c\u00f3digo en l\u00ednea</code></p>"},{"location":"comandos/#citas-blockquote","title":"Citas (blockquote)","text":"<pre><code>&gt; Esta es una cita destacada.\n&gt; Puede tener m\u00faltiples l\u00edneas.\n</code></pre> <p>Esta es una cita destacada. Puede tener m\u00faltiples l\u00edneas.</p>"},{"location":"comandos/#enlaces","title":"Enlaces","text":"<pre><code>[Enlace directo](https://www.iberopuebla.mx/)\n\n[Texto del enlace de referencia][doc-ref]\n\n[doc-ref]: https://www.iberopuebla.mx//docs \"T\u00edtulo opcional\"\n</code></pre> <p>Enlace directo</p> <p>Texto del enlace de referencia</p>"},{"location":"comandos/#listas-vinetas-numeradas-y-de-tareas","title":"Listas: vi\u00f1etas, numeradas y de tareas","text":"<pre><code>- Item A\n    * Subitem A.1\n    * Subitem A.2\n- Item B\n    - Subitem B.1\n    - Subitem B.2\n\n1.  Paso 1\n    1.  Paso 1.1\n    2.  Paso 1.2\n        1.  Paso 1.2.1\n        2.  Paso 1.2.2\n\n- [x] Hecho\n- [ ] Pendiente\n</code></pre> <ul> <li>Item A<ul> <li>Subitem A.1</li> <li>Subitem A.2</li> </ul> </li> <li>Item B<ul> <li>Subitem B.1</li> <li>Subitem B.2</li> </ul> </li> </ul> <ol> <li> <p>Paso 1</p> <ol> <li>Paso 1.1</li> <li>Paso 1.2<ol> <li>Paso 1.2.1</li> <li>Paso 1.2.2</li> </ol> </li> </ol> </li> <li> <p> Hecho</p> </li> <li> Pendiente</li> </ol>"},{"location":"comandos/#tablas","title":"Tablas","text":"<pre><code>| Componente | Cant. | Nota        |\n|-----------:|:-----:|-------------|\n| Sensor X   | 2     | I2C         |\n| MCU Y      | 1     | WiFi/BLE    |\n</code></pre> Componente Cant. Nota Sensor X 2 I2C MCU Y 1 WiFi/BLE"},{"location":"comandos/#imagenes","title":"Im\u00e1genes","text":"<pre><code>![Diagrama del sistema](recursos/imgs/ibero.jpeg)\n\n&lt;!-- Control de tama\u00f1o usando HTML (cuando se requiera) --&gt;\n&lt;img src=\"../recursos/imgs/ibero.jpeg\" alt=\"Diagrama del sistema\" width=\"420\"&gt;\n</code></pre>"},{"location":"comandos/#pdfs-enlace-y-embebido","title":"PDFs (enlace y embebido)","text":"<pre><code>[Descargar especificaci\u00f3n (PDF)](recursos/archivos/Calendario.pdf)\n\n&lt;!-- Embed (requiere navegador compatible) --&gt;\n&lt;object data=\"recursos/archivos/Calendario.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600\"&gt;\n  &lt;p&gt;No se pudo mostrar el PDF. &lt;a href=\"../recursos/archivos/Calendario.pdf\"&gt;Descargar&lt;/a&gt;&lt;/p&gt;\n&lt;/object&gt;\n</code></pre> <p>Descargar especificaci\u00f3n (PDF)</p>"},{"location":"comandos/#admonitions-material","title":"Admonitions (Material)","text":"<pre><code>!!! note \"Nota\"\n    Esto es una nota informativa.\n\n!!! tip \"Sugerencia\"\n    Un consejo breve para el usuario.\n\n!!! warning \"Advertencia\"\n    Precauciones o riesgos a considerar.\n\n??? info \"M\u00e1s informaci\u00f3n (colapsable)\"\n    Contenido adicional que se puede expandir.\n</code></pre> <p>Nota</p> <p>Esto es una nota informativa.</p> <p>Sugerencia</p> <p>Un consejo breve para el usuario.</p> <p>Advertencia</p> <p>Precauciones o riesgos a considerar.</p> M\u00e1s informaci\u00f3n (colapsable) <p>Contenido adicional que se puede expandir.</p>"},{"location":"comandos/#codigo-con-resaltado","title":"C\u00f3digo con resaltado","text":"<p><pre><code>```python\ndef medir(canal: int) -&gt; dict:\n    # Simulaci\u00f3n de lectura\n    return {\"canal\": canal, \"valor\": 523, \"unidad\": \"mV\"}\n\nprint(medir(1))\n</code></pre> <pre><code>```python\ndef medir(canal: int) -&gt; dict:\n    # Simulaci\u00f3n de lectura\n    return {\"canal\": canal, \"valor\": 523, \"unidad\": \"mV\"}\n\nprint(medir(1))\n</code></pre></p>"},{"location":"comandos/#separador-horizontal","title":"Separador horizontal","text":"<pre><code>---\n</code></pre>"},{"location":"comandos/#listas-anidadas-con-codigo-y-notas","title":"Listas anidadas con c\u00f3digo y notas","text":"<pre><code>- **M\u00f3dulo A**\n  - Funci\u00f3n: `procesar()`\n  - Entrada:\n    - `signal` (float)\n    - `freq` (Hz)\n  - Salida:\n    - JSON con `valor`, `unidad`\n  - !!! note\n        Documenta rangos v\u00e1lidos y casos borde.\n</code></pre> <ul> <li>M\u00f3dulo A</li> <li>Funci\u00f3n: <code>procesar()</code></li> <li>Entrada:<ul> <li><code>signal</code> (float)</li> <li><code>freq</code> (Hz)</li> </ul> </li> <li>Salida:<ul> <li>JSON con <code>valor</code>, <code>unidad</code></li> </ul> </li> <li> <p>Note</p> <pre><code>Documenta rangos v\u00e1lidos y casos borde.\n</code></pre> </li> </ul>"},{"location":"comandos/#bloques-de-cita-con-codigo-pseudo-logs","title":"Bloques de cita con c\u00f3digo (pseudo-logs)","text":"<pre><code>&gt; **Log:**\n&gt; ```\n&gt; [12:00:00] Init OK\n&gt; [12:00:01] Conectando a I2C...\n&gt; [12:00:02] Lectura: 523 mV\n&gt; ```\n</code></pre> <p>Log: <pre><code>[12:00:00] Init OK\n[12:00:01] Conectando a I2C...\n[12:00:02] Lectura: 523 mV\n</code></pre></p>"},{"location":"ejemplo/","title":"Control de LED y Actuadores con ESP32","text":""},{"location":"ejemplo/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Control de LED y Actuadores con ESP32  </li> <li>Autor: Eduardo Salamanca  </li> <li>Curso / Asignatura:  Introducci\u00f3n a ala mecatr\u00f3nica</li> <li>Descripci\u00f3n breve:   Este proyecto combina dos pr\u00e1cticas de control b\u00e1sico con el microcontrolador ESP32:  </li> <li>Encendido de un LED mediante Bluetooth.  </li> <li>Manejo de actuadores (motor DC y servomotor) con variaci\u00f3n de giro, velocidad y \u00e1ngulo.   Ambas actividades introducen conceptos esenciales de control digital, PWM y comunicaci\u00f3n inal\u00e1mbrica.</li> </ul>"},{"location":"ejemplo/#2-objetivos","title":"2) Objetivos","text":"<ul> <li> <p>General:   Implementar el control de perif\u00e9ricos y actuadores utilizando el ESP32, aplicando principios de electr\u00f3nica digital, PWM y comunicaci\u00f3n Bluetooth.</p> </li> <li> <p>Espec\u00edficos:</p> </li> <li>Configurar el entorno de desarrollo y los pines de salida del ESP32.  </li> <li>Controlar un LED desde una aplicaci\u00f3n m\u00f3vil por Bluetooth.  </li> <li>Manejar un motor DC con control de giro y velocidad usando PWM.  </li> <li>Controlar un servomotor en distintos \u00e1ngulos mediante se\u00f1ales PWM.  </li> <li>Comprender la relaci\u00f3n entre hardware, programaci\u00f3n y respuesta f\u00edsica del sistema.</li> </ul>"},{"location":"ejemplo/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye:</li> <li>Control de LED por Bluetooth.  </li> <li>Control de giro y velocidad de motor DC.  </li> <li>Control de posici\u00f3n de servomotor (0\u00b0 a 180\u00b0).  </li> <li> <p>Programaci\u00f3n completa en Arduino IDE.</p> </li> <li> <p>No incluye:</p> </li> <li>Control autom\u00e1tico por sensores.  </li> <li>Control simult\u00e1neo de m\u00faltiples motores.  </li> <li>Comunicaci\u00f3n Wi-Fi o interfaces gr\u00e1ficas avanzadas.</li> </ul>"},{"location":"ejemplo/#4-requisitos","title":"4) Requisitos","text":""},{"location":"ejemplo/#software","title":"Software","text":"<ul> <li>Sistema operativo: Windows / macOS / Linux  </li> <li>IDE: Arduino IDE 2.x  </li> <li>Bibliotecas necesarias: </li> <li><code>BluetoothSerial.h</code> (control BT)  </li> <li><code>Servo.h</code> (control del servomotor)  </li> </ul>"},{"location":"ejemplo/#hardware","title":"Hardware","text":"<ul> <li>ESP32 DevKit  </li> <li>LED + resistencia de 220 \u03a9  </li> <li>Motor DC     </li> <li>Servomotor   </li> <li>Fuente de alimentaci\u00f3n externa  </li> <li>Protoboard y cables Dupont  </li> </ul>"},{"location":"ejemplo/#conocimientos-previos","title":"Conocimientos previos","text":"<ul> <li>Se\u00f1ales PWM y control de velocidad.  </li> <li>Manejo de pines digitales de salida.  </li> <li>Programaci\u00f3n estructurada en Arduino.  </li> <li>Conexi\u00f3n de componentes electr\u00f3nicos.</li> </ul>"},{"location":"ejemplo/#5-instalacion-y-configuracion","title":"5) Instalaci\u00f3n y Configuraci\u00f3n","text":""},{"location":"ejemplo/#a-control-de-led-por-bluetooth","title":"A) Control de LED por Bluetooth","text":"<pre><code>#include \"BluetoothSerial.h\"\nBluetoothSerial SerialBT;\n\nint ledPin = 2;\n\nvoid setup() {\n  Serial.begin(115200);\n  SerialBT.begin(\"ESP32_LED\");\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  if (SerialBT.available()) {\n    char data = SerialBT.read();\n    if (data == '1') digitalWrite(ledPin, HIGH);\n    if (data == '0') digitalWrite(ledPin, LOW);\n  }\n}\n</code></pre> <p>Comandos desde la app Bluetooth: - <code>'1'</code> \u2192 Enciende el LED - <code>'0'</code> \u2192 Apaga el LED  </p>"},{"location":"ejemplo/#b-control-de-motor-dc-giro-y-velocidad","title":"B) Control de motor DC (giro y velocidad)","text":"<pre><code>int ENA = 5;   // PWM (velocidad)\nint IN1 = 18;  // Direcci\u00f3n\nint IN2 = 19;  // Direcci\u00f3n\n\nvoid setup() {\n  pinMode(ENA, OUTPUT);\n  pinMode(IN1, OUTPUT);\n  pinMode(IN2, OUTPUT);\n}\n\nvoid loop() {\n  // Giro en un sentido\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  analogWrite(ENA, 150); // Velocidad media\n  delay(2000);\n\n  // Aumentar velocidad\n  analogWrite(ENA, 255);\n  delay(2000);\n\n  // Cambiar sentido\n  digitalWrite(IN1, LOW);\n  digitalWrite(IN2, HIGH);\n  analogWrite(ENA, 200);\n  delay(2000);\n\n  // Detener\n  analogWrite(ENA, 0);\n  delay(2000);\n}\n</code></pre>"},{"location":"ejemplo/#c-control-de-servomotor","title":"C) Control de servomotor","text":"<pre><code>#include &lt;Servo.h&gt;\nServo servoMotor;\n\nvoid setup() {\n  servoMotor.attach(13); // Pin PWM\n}\n\nvoid loop() {\n  // Mover el servo entre varios \u00e1ngulos\n  servoMotor.write(0);\n  delay(1000);\n  servoMotor.write(90);\n  delay(1000);\n  servoMotor.write(180);\n  delay(1000);\n}\n</code></pre>"},{"location":"ejemplo/#6-resultados-esperados","title":"6) Resultados esperados","text":"<ul> <li>El LED responde correctamente a los comandos Bluetooth.  </li> <li>El motor DC cambia de direcci\u00f3n y velocidad de manera controlada.  </li> <li>El servomotor se posiciona con precisi\u00f3n en los \u00e1ngulos definidos.  </li> <li>Se comprende el uso del PWM en el control de velocidad y posici\u00f3n.</li> </ul>"},{"location":"ejemplo/#7-conclusiones","title":"7) Conclusiones","text":"<ul> <li>Se comprob\u00f3 la versatilidad del ESP32 para controlar diferentes actuadores.  </li> <li>El uso de PWM permiti\u00f3 regular tanto la velocidad de motores como el \u00e1ngulo de servos.  </li> <li>Se integraron conceptos de programaci\u00f3n, electr\u00f3nica y comunicaci\u00f3n inal\u00e1mbrica.  </li> <li>Este proyecto sienta la base para aplicaciones IoT m\u00e1s complejas con sensores y automatizaci\u00f3n.</li> </ul>"},{"location":"ejemplo/#proyecto-2-coche-omnidireccional-controlado-por-bluetooth-esp32-xbox-controller","title":"\ud83e\udd16 Proyecto 2 \u2013 Coche Omnidireccional Controlado por Bluetooth (ESP32 + Xbox Controller)","text":"<p>\ud83d\ude80 Proyecto acad\u00e9mico de control de movimiento y actuadores, integrando el ESP32 con comunicaci\u00f3n Bluetooth y llantas omnidireccionales.</p>"},{"location":"ejemplo/#1-resumen_1","title":"1\ufe0f\u20e3 Resumen","text":"<ul> <li>Nombre del proyecto: Coche de Futbol Bluetooth con ESP32  </li> <li>Equipo / Autor(es): Eduardo Salamanca y equipo  </li> <li>Curso / Asignatura: Electr\u00f3nica y Programaci\u00f3n de Microcontroladores  </li> <li>Fecha: 20/10/2025  </li> <li>Descripci\u00f3n breve:   Este proyecto implementa un coche omnidireccional controlado mediante Bluetooth, usando un control de Xbox y un ESP32.   El objetivo final fue participar en partidos tipo f\u00fatbol con los coches controlados remotamente.</li> </ul>"},{"location":"ejemplo/#2-objetivos_1","title":"2\ufe0f\u20e3 Objetivos","text":"<ul> <li> <p>General:   Dise\u00f1ar e implementar un sistema m\u00f3vil controlado por Bluetooth que permita controlar la direcci\u00f3n, velocidad y rotaci\u00f3n mediante un control inal\u00e1mbrico.</p> </li> <li> <p>Espec\u00edficos: </p> </li> <li>Implementar el control de movimiento con llantas omnidireccionales.  </li> <li>Integrar puentes H para controlar los motores.  </li> <li>Programar el ESP32 para recibir se\u00f1ales Bluetooth del control.  </li> <li>Dise\u00f1ar la carcasa del coche en MDF mediante corte l\u00e1ser.  </li> <li>Incorporar el control de servomotores y LED del proyecto anterior.  </li> </ul>"},{"location":"ejemplo/#3-alcance-y-exclusiones_1","title":"3\ufe0f\u20e3 Alcance y Exclusiones","text":"<ul> <li>Incluye: </li> <li>Control inal\u00e1mbrico con Bluetooth.  </li> <li>Control direccional completo (adelante, atr\u00e1s, izquierda, derecha, giro).  </li> <li>Control de velocidad variable.  </li> <li>Estructura mec\u00e1nica cortada en MDF.  </li> <li> <p>Integraci\u00f3n de LEDs y servomotores del proyecto anterior.  </p> </li> <li> <p>No incluye: </p> </li> <li>Control por Wi-Fi o conexi\u00f3n a Internet.  </li> <li>Sensores de distancia o evitaci\u00f3n de obst\u00e1culos (versi\u00f3n futura).  </li> </ul>"},{"location":"ejemplo/#4-requisitos_1","title":"4\ufe0f\u20e3 Requisitos","text":""},{"location":"ejemplo/#software_1","title":"\ud83e\udde0 Software","text":"<ul> <li>IDE: Arduino IDE (versi\u00f3n m\u00e1s reciente)  </li> <li>Plataforma: ESP32 Dev Module  </li> <li>Librer\u00edas necesarias: </li> <li><code>BluetoothSerial.h</code> </li> <li><code>Servo.h</code> </li> </ul>"},{"location":"ejemplo/#hardware_1","title":"\u2699\ufe0f Hardware","text":"<ul> <li>ESP32  </li> <li>4 llantas omnidireccionales  </li> <li>2 puentes H L298N  </li> <li>Servomotor SG90 (para direcci\u00f3n o accesorio)  </li> <li>Jumpers y cables Dupont  </li> <li>Fuente de alimentaci\u00f3n 12 V  </li> <li>Carcasa de MDF cortada con l\u00e1ser  </li> <li>Control Xbox (Bluetooth)  </li> <li>Protoboard  </li> </ul>"},{"location":"ejemplo/#5-codigo-principal-esp32","title":"5\ufe0f\u20e3 C\u00f3digo Principal (ESP32)","text":"<p>```cpp</p>"},{"location":"ejemplo/#include-bluetoothserialh","title":"include \"BluetoothSerial.h\"","text":""},{"location":"ejemplo/#include","title":"include  <p>BluetoothSerial SerialBT;</p>","text":""},{"location":"ejemplo/#define-ena-25","title":"define ENA 25","text":""},{"location":"ejemplo/#define-in1-26","title":"define IN1 26","text":""},{"location":"ejemplo/#define-in2-27","title":"define IN2 27","text":""},{"location":"ejemplo/#define-in3-14","title":"define IN3 14","text":""},{"location":"ejemplo/#define-in4-12","title":"define IN4 12","text":""},{"location":"ejemplo/#define-enb-13","title":"define ENB 13 <p>Servo servo;</p> <p>char comando;</p> <p>void setup() {   Serial.begin(115200);   SerialBT.begin(\"Coche_BT_ESP32\");   servo.attach(15);</p> <p>pinMode(ENA, OUTPUT);   pinMode(ENB, OUTPUT);   pinMode(IN1, OUTPUT);   pinMode(IN2, OUTPUT);   pinMode(IN3, OUTPUT);   pinMode(IN4, OUTPUT);</p> <p>Serial.println(\"Esperando conexi\u00f3n Bluetooth...\"); }</p> <p>void loop() {   if (SerialBT.available()) {     comando = SerialBT.read();     Serial.print(\"Comando recibido: \");     Serial.println(comando);</p> <pre><code>switch (comando) {\n  case 'F':  // Adelante\n    digitalWrite(IN1, HIGH);\n    digitalWrite(IN2, LOW);\n    digitalWrite(IN3, HIGH);\n    digitalWrite(IN4, LOW);\n    analogWrite(ENA, 255);\n    analogWrite(ENB, 255);\n    break;\n\n  case 'B':  // Atr\u00e1s\n    digitalWrite(IN1, LOW);\n    digitalWrite(IN2, HIGH);\n    digitalWrite(IN3, LOW);\n    digitalWrite(IN4, HIGH);\n    analogWrite(ENA, 255);\n    analogWrite(ENB, 255);\n    break;\n\n  case 'L':  // Izquierda\n    digitalWrite(IN1, LOW);\n    digitalWrite(IN2, HIGH);\n    digitalWrite(IN3, HIGH);\n    digitalWrite(IN4, LOW);\n    break;\n\n  case 'R':  // Derecha\n    digitalWrite(IN1, HIGH);\n    digitalWrite(IN2, LOW);\n    digitalWrite(IN3, LOW);\n    digitalWrite(IN4, HIGH);\n    break;\n\n  case 'S':  // Stop\n    digitalWrite(IN1, LOW);\n    digitalWrite(IN2, LOW);\n    digitalWrite(IN3, LOW);\n    digitalWrite(IN4, LOW);\n    break;\n\n  case 'V':  // Servo: variaci\u00f3n de \u00e1ngulo\n    for (int i = 0; i &lt;= 180; i += 10) {\n      servo.write(i);\n      delay(50);\n    }\n    for (int i = 180; i &gt;= 0; i -= 10) {\n      servo.write(i);\n      delay(50);\n    }\n    break;\n}\n</code></pre> <p>} }</p>","text":""},{"location":"gitcmds/","title":"\ud83d\ude80 Comandos b\u00e1sicos de Git (primeros pasos)","text":"<p>En este curso solo usaremos los comandos esenciales de Git para trabajar con repositorios.</p>"},{"location":"gitcmds/#1-clonar-un-repositorio","title":"1. Clonar un repositorio","text":"<p>Copia un proyecto de GitHub a tu computadora.</p> <pre><code>git clone https://github.com/usuario/repositorio.git\n</code></pre>"},{"location":"gitcmds/#2-verificar-cambios","title":"2. Verificar cambios","text":"<p>Muestra qu\u00e9 archivos has modificado o agregado.</p> <pre><code>git status\n</code></pre>"},{"location":"gitcmds/#3-preparar-cambios","title":"3. Preparar cambios","text":"<p>Agrega archivos para guardarlos en el pr\u00f3ximo commit.</p> <pre><code>git add archivo.txt\ngit add .   # agrega todos los archivos modificados\n</code></pre>"},{"location":"gitcmds/#4-guardar-cambios-commit","title":"4. Guardar cambios (commit)","text":"<p>Guarda tus cambios con un mensaje descriptivo.</p> <pre><code>git commit -m \"Descripci\u00f3n breve de los cambios\"\n</code></pre>"},{"location":"gitcmds/#5-subir-cambios-al-repositorio-push","title":"5. Subir cambios al repositorio (push)","text":"<p>Env\u00eda tus commits locales al repositorio en GitHub.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"gitcmds/#6-traer-cambios-del-remoto-pull","title":"6. Traer cambios del remoto (pull)","text":"<p>Actualiza tu proyecto con los \u00faltimos cambios de GitHub.</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"gitcmds/#flujo-tipico-de-trabajo","title":"Flujo t\u00edpico de trabajo","text":"<ol> <li> <p>Traer cambios del remoto <pre><code>git pull origin main\n</code></pre></p> </li> <li> <p>Editar tus archivos de proyecto.</p> </li> <li> <p>Preparar los cambios <pre><code>git add .\n</code></pre></p> </li> <li> <p>Guardar los cambios <pre><code>git commit -m \"Mensaje descriptivo\"\n</code></pre></p> </li> <li> <p>Enviar los cambios al remoto <pre><code>git push origin main\n</code></pre></p> </li> </ol> <p>Consejo</p> <p>Piensa en este ciclo como un loop infinito: cada vez que quieras contribuir \u2192 primero <code>pull</code>, despu\u00e9s <code>add</code> + <code>commit</code>, y finalmente <code>push</code>.</p>"}]}